---
title: "Assignment 5"
subtitle: "STAT 201"
author: "Phoebe Chen"

format:
  html:
    toc: true
    embed-resources: true

execute:
  message: false
  warning: false
---

## Instructions {-}

1. **Write your name** on the assignment

2. Write your code in the *Code* cells of the **template provided** to write solutions for the assignment. **Do not open a new qmd**, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.

3. You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.

4. There are point deductions if your code is not clean and organized.

5. Only print what is asked for. Highly inefficient code will be deducted for because it demonstrates lack of understanding.

6. Render as an HTML and **submit BOTH the .qmd and HTML file**.

The grader cannot grade what they cannot see! Failure to render your document after completing all questions will lead to deductions.

## Question 1 (4 points)
 
### Part a

Create a character variable called `var_string` that contains any integer (coded as a character). Print `var_string` and print the results of using the `typeof()` function.

```{r}
var_string <- 3L
print(var_string)
typeof(var_string)
```

### Part b

Create a variable called `var_num` which is created by converting `var_sting` to a numeric variable. 

Then create a variable called `var_even` which is a Boolean variable that is TRUE if `var_num` is even and FALSE otherwise. 

Then create a variable called `var_pos` which is a Boolean variable that is TRUE if `var_num` is greater than 0 and FALSE otherwise. 

Print `var_num`, `var_even`, and `var_pos`.

```{r}
var_num <- as.numeric(var_string)
var_even <- as.logical(var_num %%2 ==0)
var_pos <- as.logical(var_num > 0)
print(var_num)
print(var_even)
print(var_pos)
```


### Part c

In a single line, using only &&, ||, ! functions, have the output return TRUE if `var_even` and `var_pos` are **different**, and FALSE if they are the **same**.

This needs to be capable of running for any possible integer for `var_num`, not just the one specific case you entered.

```{r}
print((var_even && !var_pos) || (!var_even && var_pos))
```


## Question 2 (3 points)

Define a variable called `var_seconds` that contains any integer of your choice for the number of seconds and prints out how many corresponding minutes and seconds that is. 

Example:

        `200 seconds is 3 minutes and 20 seconds.`
        
Requirements: 

  - if minutes is 1 then it should instead read 1 minute (not 1 minutes)
  - if seconds is 1 then it should instead read 1 second (not 1 seconds)

Example:

        `61 seconds is 1 minute and 1 second.        
        
This needs to be capable of running on any possible integer for `var_seconds`, not just the one specific case you entered.

```{r}
var_seconds <- 121L
var_minutes <- var_seconds%/%60
var_remaining <- var_seconds-var_minutes*60
if(var_minutes == 1){
  if(var_remaining== 1){
    cat(var_seconds, " is ", var_minutes, " minute and ", var_remaining, " second")
  }
  else{
    cat(var_seconds, " is ", var_minutes, " minute and ", var_remaining, " seconds")
  }
}else{
  if(var_remaining== 1){
    cat(var_seconds, " is ", var_minutes, " minutes and ", var_remaining, " second")
  }
  else{
    cat(var_seconds, " is ", var_minutes, " minutes and ", var_remaining, " seconds")
  }
}
```


## Question 3 (6 points)

The below code chunk defines 3 numbers.

```{r}
num1 <- 10
num2 <- 28
num3 <- 4
```

### Part a

Use a single if-else if-else statement to print the largest of the 3 numbers defined above. 

Note: this must still run correctly even if you change the numbers.

```{r}
if(num1>num2 && num1>num3){
  print(num1)
}else if(num2>num1 && num2>num3){
  print(num2)
}else{
  print(num3)
}
```

### Part b

Use a nested conditional statement to print the largest of the 3 numbers defined above. 

Note: this must still run correctly even if you change the numbers.

```{r}
if(num1>num2){
  if(num1>num3){
    print(num1)
  }else{
    print(num3)
  }
}else{
  if(num2>num3){
    print(num2)
  }else{
    print(num3)
  }
}
```


## Question 4 (3 points)

Write a program (loop) that calculates the factorial of a number.

- A factorial is the product of all positive integers less than or equal to a given positive integer. Example: 5! = 5 * 4 * 3 * 2 * 1
- Define a variable to any integer value of your choice prior to creating the program.
- ONLY print the final factorial of the number

Note: this must still run correctly even if you change the number.

```{r}
value <- 5L
factorial <- 1L
for(i in 1:value){
  factorial <- factorial*i
}
print(factorial)
```

## Question 5 (4 points)

Define a variable to be a numeric value of 24.

Write a program (loop) that prints all the factors of a positive integer. A factor is any positive integer that divides the number and leaves no remainder. Show the output of the program with the variable you defined to be 24.

Note: this must still run correctly even if you change the number.

```{r}
value <- 24L
factors <- 1
for (i in 2:value){
  if (value%%i ==0){
    factors <- c(factors, i)
  }
}
print(factors)
```

## Question 6 (4 points)

Define a variable to be a numeric value of 89.

Write a program (loop) that identifies whether a positive integer is prime or not. A prime number is a number whose only divisors are 1 and itself. 

ONLY print one of the following statements:

  - `{} is a prime number.`
  - `{} is not a prime number.`
  
depending on whether or not the integer is prime.
  
Show the output of the program with the variable you defined to be 89.

Note: this must still run correctly even if you change the number.

```{r}
value <- 89L
if (value ==1L){
  cat(value, " is not a prime number.")
}else{
  count <- 0
  for (i in 2:value-1){
  if(value%%i!=0){
      count <- count+1
  }
  }
  if (count == value-2){
    cat(value, "is a prime number.")
    }else{
    cat(value, "is not a prime number.")
    }
}
```


## Question 7 (6 points)

Define a variable to be a numeric value of 4000.

Write a program (loop) that finds the first positive integer whose square exceeds the numeric variable you defined.

ONLY print the following statement:

 - `{} squared is {}, and is the first number whose square exceeds {}.`

Example:

  - `64 squared is 4096, and is the first number whose square exceeds 4000.`

Note: this must still run correctly even if you change the initial number.

Example:

  - `11 squared is 121, and is the first number whose square exceeds 100.`

```{r}
value <- 4000L
num <- 1
while(num^2<value){
  num <- num + 1
}
cat(num, ' squared is ', num^2, ", and is the first number whose square exceeds ", value, sep = "")
```